{"version":3,"sources":["scripts/main.js"],"names":["gameField","document","body","querySelector","startButton","startMessage","scoreMessage","winMessage","loseMessage","size","score","board","getRandomInt","max","Math","floor","random","createRandomCell","randomRow","randomCell","value","reset","classList","add","isWin","some","arr","cell","remove","isLose","haveSpace","r","c","lose","includes","renderCells","row","currentCell","rows","cells","innerHTML","className","slide","array","newArray","filter","element","i","length","filteredArray","zeros","Array","fill","finalArray","concat","hasChanged","cur","prev","col","slideUp","updateColumn","slideDown","reverse","slideLeft","newRow","slideRight","newCell","addEventListener","replace","e","copyBoard","map","preventDefault","code","toString"],"mappings":"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","file":"main.3519539a.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst gameField = document.body.querySelector('.game-field');\nconst startButton = document.body.querySelector('.button', '.start');\nconst startMessage = document.body.querySelector('.message-start');\nconst scoreMessage = document.body.querySelector('.game-score');\nconst winMessage = document.body.querySelector('.message-win');\nconst loseMessage = document.body.querySelector('.message-lose');\n\nconst size = 4;\nlet score = 0;\nlet board = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n\nfunction createRandomCell() {\n  const randomRow = getRandomInt(size);\n  const randomCell = getRandomInt(size);\n  const probability = 10;\n  const value = (getRandomInt(100) <= probability) ? 4 : 2;\n\n  if (board[randomRow][randomCell] === 0) {\n    board[randomRow][randomCell] = value;\n  } else {\n    createRandomCell();\n  }\n}\n\nfunction reset() {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  winMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n}\n\nfunction isWin() {\n  if (board.some((arr) => arr.some((cell) => cell === 2048))) {\n    winMessage.classList.remove('hidden');\n  }\n}\n\nfunction isLose() {\n  if (haveSpace()) {\n    return false;\n  }\n\n  for (let r = 0; r < size; r++) {\n    for (let c = 0; c < size - 1; c++) {\n      if (board[r][c] === board[r][c + 1]) {\n        return false;\n      }\n    }\n  }\n\n  for (let c = 0; c < size; c++) {\n    for (let r = 0; r < size - 1; r++) {\n      if (board[r][c] === board[r + 1][c]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction lose() {\n  loseMessage.classList.remove('hidden');\n}\n\nfunction haveSpace() {\n  for (let r = 0; r < size; r++) {\n    if (board[r].includes(0)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction renderCells() {\n  for (let row = 0; row < size; row++) {\n    for (let cell = 0; cell < size; cell++) {\n      const currentCell = gameField.rows[row].cells[cell];\n\n      currentCell.innerHTML = '';\n      currentCell.className = 'field-cell';\n\n      if (board[row][cell] > 0) {\n        currentCell.innerHTML = `${board[row][cell]}`;\n        currentCell.classList.add(`field-cell--${board[row][cell]}`);\n      }\n    }\n  }\n};\n\nfunction slide(array) {\n  const newArray = array.filter((element) => {\n    return element !== 0;\n  });\n\n  for (let i = 0; i < newArray.length - 1; i++) {\n    if (newArray[i] === newArray[i + 1]) {\n      newArray[i] *= 2;\n      newArray[i + 1] = 0;\n      score += newArray[i];\n    }\n  }\n\n  const filteredArray = newArray.filter((element) => {\n    return element !== 0;\n  });\n\n  const zeros = Array(array.length - filteredArray.length).fill(0);\n  const finalArray = filteredArray.concat(zeros);\n\n  return finalArray;\n};\n\nstartButton.addEventListener('click', () => {\n  reset();\n\n  startMessage.classList.add('hidden');\n  startButton.classList.replace('start', 'restart');\n  startButton.innerHTML = 'restart';\n\n  createRandomCell();\n  createRandomCell();\n  renderCells();\n});\n\nfunction hasChanged(cur, prev) {\n  for (let row = 0; row < size; row++) {\n    for (let col = 0; col < size; col++) {\n      if (cur[row][col] !== prev[row][col]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction slideUp() {\n  for (let c = 0; c < size; c++) {\n    const column = [board[0][c], board[1][c], board[2][c], board[3][c]];\n    const newColumn = slide(column);\n\n    updateColumn(c, newColumn);\n  }\n}\n\nfunction slideDown() {\n  for (let c = 0; c < size; c++) {\n    const column = [board[3][c], board[2][c], board[1][c], board[0][c]];\n    const newColumn = slide(column).reverse();\n\n    updateColumn(c, newColumn);\n  }\n}\n\nfunction slideLeft() {\n  for (let r = 0; r < size; r++) {\n    const row = board[r];\n    const newRow = slide(row);\n\n    board[r] = newRow;\n  }\n}\n\nfunction slideRight() {\n  for (let r = 0; r < size; r++) {\n    const row = board[r];\n\n    if (slide(row) === row.reverse()) {\n      return;\n    }\n\n    const newRow = slide(row).reverse();\n\n    board[r] = newRow;\n  }\n}\n\nfunction updateColumn(cell, newCell) {\n  for (let row = 0; row < size; row++) {\n    board[row][cell] = newCell[row];\n  }\n}\n\ndocument.addEventListener('keydown', (e) => {\n  const copyBoard = board.map((arr) => [...arr]);\n\n  e.preventDefault();\n\n  switch (e.code) {\n    case 'KeyW':\n      slideUp();\n      break;\n\n    case 'KeyS':\n      slideDown();\n      break;\n\n    case 'KeyA':\n      slideLeft();\n      break;\n\n    case 'KeyD':\n      slideRight();\n      break;\n  }\n\n  isWin();\n\n  if (isLose()) {\n    lose();\n  }\n\n  if (hasChanged(board, copyBoard)) {\n    createRandomCell();\n  };\n\n  renderCells();\n  scoreMessage.innerHTML = score.toString();\n});\n"]}